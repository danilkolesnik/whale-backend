import { Context } from 'grammy';
import axios from 'axios';
import { API_URL } from '../../../utils/constant';
import { BotContext } from '../types';

export async function handleUsersMenu(ctx: BotContext) {
  if (ctx.callbackQuery) {
    await ctx.editMessageText('–ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data: 'get_all_users' }],
          [{ text: 'üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', callback_data: 'view_user_menu' }],
          [{ text: 'üí∞ –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏', callback_data: 'update_user_menu' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  } else {
    await ctx.reply('–ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data: 'get_all_users' }],
          [{ text: 'üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', callback_data: 'view_user_menu' }],
          [{ text: 'üí∞ –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏', callback_data: 'update_user_menu' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }
}

export async function handleViewUserMenu(ctx: BotContext) {
  ctx.session.waitingForTelegramId = true;
  if (ctx.callbackQuery) {
    await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  } else {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  }
}

export async function handleUpdateUserMenu(ctx: BotContext) {
  if (ctx.callbackQuery) {
    await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∞ –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–æ—à—ñ', callback_data: 'update_user_money' }],
          [{ text: 'üõ°Ô∏è –û–Ω–æ–≤–∏—Ç–∏ —â–∏—Ç', callback_data: 'update_user_shield' }],
          [{ text: 'üíé –û–Ω–æ–≤–∏—Ç–∏ USDT', callback_data: 'update_user_usdt' }],
          [{ text: 'üîß –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏', callback_data: 'update_user_tools' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  } else {
    await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∞ –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–æ—à—ñ', callback_data: 'update_user_money' }],
          [{ text: 'üõ°Ô∏è –û–Ω–æ–≤–∏—Ç–∏ —â–∏—Ç', callback_data: 'update_user_shield' }],
          [{ text: 'üíé –û–Ω–æ–≤–∏—Ç–∏ USDT', callback_data: 'update_user_usdt' }],
          [{ text: 'üîß –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏', callback_data: 'update_user_tools' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  }
}

export async function handleGetAllUsers(ctx: BotContext) {
  try {
    const users = await fetchUsers();
    const usersCount = users.length;
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\nüë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${usersCount}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } else {
      await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\nüë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${usersCount}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
  } catch (error) {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(error instanceof Error ? error.message : 'An unexpected error occurred.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } else {
      await ctx.reply(error instanceof Error ? error.message : 'An unexpected error occurred.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
  }
}

export async function handleUpdateUserMoney(ctx: BotContext) {
  ctx.session.waitingForMoney = true;
  await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –≥—Ä–æ—à—ñ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
      ]
    }
  });
}

export async function handleUpdateUserShield(ctx: BotContext) {
  ctx.session.waitingForShield = true;
  await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —â–∏—Ç:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
      ]
    }
  });
}

export async function handleUpdateUserUsdt(ctx: BotContext) {
  ctx.session.waitingForUsdt = true;
  await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ USDT:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
      ]
    }
  });
}

export async function handleUpdateUserTools(ctx: BotContext) {
  ctx.session.waitingForTools = true;
  await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
      ]
    }
  });
}

export async function handleUserInput(ctx: BotContext) {
  const telegramId = ctx.message?.text;
  if (!telegramId) {
    await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
    return;
  }
  try {
    const response = await axios.get(`${API_URL}/user/user-by-telegram-id?telegramId=${telegramId}`);
    const user = response.data.data;
    await ctx.reply(`
–Ü–º'—è: ${user.displayName || '–ù–µ–≤—ñ–¥–æ–º–æ'}
üí∞ –ì—Ä–æ—à—ñ: ${user.balance.money || 0}
üõ°Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —â–∏—Ç: ${user.balance.shield || 0}
üíé USDT: ${user.balance.usdt || 0}
üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: ${user.balance.tools || 0}
–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:
${user.inventory.map((item, index) => `
${index + 1}. –ù–∞–∑–≤–∞: ${item.name}
    –¢–∏–ø: ${item.type}
    –†—ñ–≤–µ–Ω—å: ${item.level}
    –©–∏—Ç: ${item.shield}
    –¶—ñ–Ω–∞: ${item.price}`).join('\n')}
`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  } catch (error) {
    await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
  }
  delete ctx.session.waitingForTelegramId;
}

export async function handleUserTextInput(ctx: BotContext) {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
  if (ctx.session.waitingForMoney) {
    const telegramId = ctx.message?.text;
    if (!telegramId) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    ctx.session.updateMoneyTelegramId = telegramId;
    ctx.session.waitingForMoney = false;
    ctx.session.waitingForMoneyValue = true;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –≥—Ä–æ—à–µ–π:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
    return;
  }
  if (ctx.session.waitingForMoneyValue) {
    const money = Number(ctx.message?.text);
    if (isNaN(money)) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    const telegramId = ctx.session.updateMoneyTelegramId;
    try {
      await axios.post(`${API_URL}/user/update-parameters`, {
        telegramId,
        money
      });
      await ctx.reply('–ì—Ä–æ—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!', {
       reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } catch (e) {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≥—Ä–æ—à–µ–π.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
    ctx.session.waitingForMoneyValue = false;
    ctx.session.updateMoneyTelegramId = undefined;
    return;
  }
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —â–∏—Ç–∞
  if (ctx.session.waitingForShield) {
    const telegramId = ctx.message?.text;
    if (!telegramId) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    ctx.session.updateShieldTelegramId = telegramId;
    ctx.session.waitingForShield = false;
    ctx.session.waitingForShieldValue = true;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —â–∏—Ç:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
    return;
  }
  if (ctx.session.waitingForShieldValue) {
    const shield = Number(ctx.message?.text);
    if (isNaN(shield)) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    const telegramId = ctx.session.updateShieldTelegramId;
    try {
      await axios.post(`${API_URL}/user/update-parameters`, {
        telegramId,
        shield
      });
      await ctx.reply('–©–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } catch (e) {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —â–∏—Ç–∞.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
    ctx.session.waitingForShieldValue = false;
    ctx.session.updateShieldTelegramId = undefined;
    return;
  }
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ USDT
  if (ctx.session.waitingForUsdt) {
    const telegramId = ctx.message?.text;
    if (!telegramId) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    ctx.session.updateUsdtTelegramId = telegramId;
    ctx.session.waitingForUsdt = false;
    ctx.session.waitingForUsdtValue = true;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É USDT:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
    return;
  }
  if (ctx.session.waitingForUsdtValue) {
    const usdt = Number(ctx.message?.text);
    if (isNaN(usdt)) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    const telegramId = ctx.session.updateUsdtTelegramId;
    try {
      await axios.post(`${API_URL}/user/update-parameters`, {
        telegramId,
        usdt
      });
      await ctx.reply('USDT –æ–Ω–æ–≤–ª–µ–Ω–æ!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } catch (e) {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ USDT.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
    ctx.session.waitingForUsdtValue = false;
    ctx.session.updateUsdtTelegramId = undefined;
    return;
  }
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  if (ctx.session.waitingForTools) {
    const telegramId = ctx.message?.text;
    if (!telegramId) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    ctx.session.updateToolsTelegramId = telegramId;
    ctx.session.waitingForTools = false;
    ctx.session.waitingForToolsValue = true;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
        ]
      }
    });
    return;
  }
  if (ctx.session.waitingForToolsValue) {
    const tools = Number(ctx.message?.text);
    if (isNaN(tools)) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
      return;
    }
    const telegramId = ctx.session.updateToolsTelegramId;
    try {
      await axios.post(`${API_URL}/user/update-parameters`, {
        telegramId,
        tools
      });
      await ctx.reply('–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    } catch (e) {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'users_menu' }]
          ]
        }
      });
    }
    ctx.session.waitingForToolsValue = false;
    ctx.session.updateToolsTelegramId = undefined;
    return;
  }
}

async function fetchUsers() {
  try {
    const response = await axios.get(`${API_URL}/user/all-users`);
    return response.data.data;
  } catch (error) {
    console.error(error);
    throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.');
  }
} 