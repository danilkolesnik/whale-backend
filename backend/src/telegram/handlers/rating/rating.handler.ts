import axios from 'axios';
import { BotContext } from '../../types';
import { API_URL, SHOP_TYPES } from '../../../utils/constant';

export async function handleRatingMenu(ctx: BotContext) {
  await ctx.editMessageText('–ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥—É:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üèÖ –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥–∏', callback_data: 'rating_view_rewards' }
        ],
        [
          { text: '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É', callback_data: 'rating_set_reward' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    }
  });
}

export async function handleViewRewards(ctx: BotContext) {
  try {
    const { data } = await axios.get(`${API_URL}/rating/rewards`);
    const lines = (data || [])
      .map((r: any) => `–ú–µ—Å—Ç–æ ${r.place}: ${r.reward}`)
      .join('\n');
    await ctx.editMessageText(lines || '–ù–∞–≥–æ—Ä–æ–¥–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'rating_menu' }]
        ]
      }
    });
  } catch (e) {
    await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥');
  }
}

export async function handleSetRewardPrompt(ctx: BotContext) {
  const session: any = ctx.session;
  session.waitingForRewardPlace = true;
  session.rewardPlace = undefined;
  session.waitingForRewardAmount = false;
  await ctx.editMessageText('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –º—ñ—Å—Ü—è (1-10):', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'rating_menu' }]
      ]
    }
  });
}

export async function handleRatingTextInput(ctx: BotContext) {
  const session: any = ctx.session;
  const text = ctx.message?.text?.trim() || '';

  if (session.waitingForRewardPlace) {
    const place = Number(text);
    if (!Number.isInteger(place) || place <= 0) {
      await ctx.reply('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –º—ñ—Å—Ü–µ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ > 0');
      return;
    }
    session.rewardPlace = place;
    session.waitingForRewardPlace = false;
    session.waitingForRewardAmount = true;
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –Ω–∞–≥–æ—Ä–æ–¥–∏ (—á–∏—Å–ª–æ):');
    return;
  }

  if (session.waitingForRewardAmount) {
    const reward = Number(text);
    if (!Number.isFinite(reward) || reward < 0) {
      await ctx.reply('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–µ–≤—ñ–¥‚Äô—î–º–Ω–µ —á–∏—Å–ª–æ');
      return;
    }
    try {
      await axios.put(`${API_URL}/rating/rewards`, {
        place: Number(session.rewardPlace),
        reward: Number(reward)
      }, { headers: { 'Content-Type': 'application/json' } });
      await ctx.reply(`–ù–∞–≥–æ—Ä–æ–¥—É –¥–ª—è –º—ñ—Å—Ü—è ${session.rewardPlace} –æ–Ω–æ–≤–ª–µ–Ω–æ: ${reward}`);
    } catch (e) {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏');
    } finally {
      session.waitingForRewardAmount = false;
      session.rewardPlace = undefined;
    }
    return;
  }
}


