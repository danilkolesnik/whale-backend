import { BotContext } from '../types';
import { API_URL } from '../../../utils/constant';
import axios from 'axios';


export async function handleUpgradeMenu(ctx: BotContext) {
  await ctx.editMessageText('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'view_upgrade_settings' }],
        [{ text: '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'create_upgrade_settings' }],
        [{ text: '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'edit_upgrade_settings' }],
        [{ text: 'üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ', callback_data: 'reset_sequence_menu' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  });
}

export async function handleViewUpgradeSettings(ctx: BotContext) {
  try {
    const response = await axios.get(`${API_URL}/user/upgrade-settings`);
    const settings = response.data;

    if (!settings || settings.length === 0) {
      await ctx.editMessageText('‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
          ]
        }
      });
      return;
    }

    let message = 'üìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏:\n\n';
    
    settings.forEach((setting: any) => {
      message += `üéØ –†—ñ–≤–Ω—ñ: ${setting.levelRange}\n`;
      message += `üîß –í–∞—Ä—Ç—ñ—Å—Ç—å: ${setting.toolsCost} —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤\n`;
      message += `üé≤ –®–∞–Ω—Å —É—Å–ø—ñ—Ö—É: ${(setting.successRate * 100).toFixed(1)}%\n`;
      
      if (setting.useSequence) {
        message += `üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å: ${setting.sequence.map((s: boolean) => s ? '‚úÖ' : '‚ùå').join('')}\n`;
        message += `üìç –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è: ${setting.currentIndex}\n`;
      }
      
      message += '\n';
    });

    await ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
        ]
      }
    });
  } catch (error) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
        ]
      }
    });
  }
}

export async function handleCreateUpgradeSettings(ctx: BotContext) {
  ctx.session.upgradeAction = 'create';
  ctx.session.upgradeStep = 'levelRange';
  
  await ctx.editMessageText('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–∫–∞—á–∫–∏\n\n–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ä—ñ–≤–Ω—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1-5):', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
      ]
    }
  });
}

export async function handleEditUpgradeSettings(ctx: BotContext) {
  try {
    const response = await axios.get(`${API_URL}/user/upgrade-settings`);
    const settings = response.data;

    if (!settings || settings.length === 0) {
      await ctx.editMessageText('‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
          ]
        }
      });
      return;
    }

    const keyboard = settings.map((setting: any) => [
      { text: `${setting.levelRange} (${setting.toolsCost} —ñ–Ω—Å—Ç—Ä., ${(setting.successRate * 100).toFixed(1)}%)`, callback_data: `edit_${setting.levelRange}` }
    ]);
    
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]);

    await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
        ]
      }
    });
  }
}

export async function handleResetSequenceMenu(ctx: BotContext) {
  try {
    const response = await axios.get(`${API_URL}/user/upgrade-settings`);
    const settings = response.data.filter((s: any) => s.useSequence);

    if (!settings || settings.length === 0) {
      await ctx.editMessageText('‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
          ]
        }
      });
      return;
    }

    const keyboard = settings.map((setting: any) => [
      { text: `${setting.levelRange} (–ø–æ–∑–∏—Ü—ñ—è: ${setting.currentIndex})`, callback_data: `reset_seq_${setting.levelRange}` }
    ]);
    
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]);

    await ctx.editMessageText('–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è:', {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'upgrade_menu' }]
        ]
      }
    });
  }
}

export async function handleUpgradeInput(ctx: BotContext) {
  const text = ctx.message?.text;
  if (!text) return;

  try {
    if (ctx.session.upgradeAction === 'create') {
      switch (ctx.session.upgradeStep) {
        case 'levelRange':
          ctx.session.upgradeData = { levelRange: text };
          ctx.session.upgradeStep = 'toolsCost';
          await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 3):');
          break;
          
        case 'toolsCost': {
          const toolsCost = parseInt(text);
          if (isNaN(toolsCost) || toolsCost < 1) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0:');
            return;
          }
          ctx.session.upgradeData!.toolsCost = toolsCost;
          ctx.session.upgradeStep = 'successRate';
          await ctx.reply('–í–≤–µ–¥—ñ—Ç—å —à–∞–Ω—Å —É—Å–ø—ñ—Ö—É (0-100, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 80):');
          break;
        }
          
        case 'successRate': {
          const successRate = parseFloat(text);
          if (isNaN(successRate) || successRate < 0 || successRate > 100) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–∞–Ω—Å. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100:');
            return;
          }
          ctx.session.upgradeData!.successRate = successRate / 100;
          ctx.session.upgradeData!.useSequence = false; // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —à–∞–Ω—Å
          await createUpgradeSettingsInDB(ctx);
          break;
        }
      }
    }
  } catch (error) {
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö');
    ctx.session.upgradeAction = undefined;
    ctx.session.upgradeStep = undefined;
    ctx.session.upgradeData = undefined;
  }
}

async function createUpgradeSettingsInDB(ctx: BotContext) {
  try {
    const response = await axios.post(`${API_URL}/user/upgrade-settings`, ctx.session.upgradeData);
    
    await ctx.reply('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –î–æ –º–µ–Ω—é –ø—Ä–æ–∫–∞—á–∫–∏', callback_data: 'upgrade_menu' }]
        ]
      }
    });
    
    // Clear session
    ctx.session.upgradeAction = undefined;
    ctx.session.upgradeStep = undefined;
    ctx.session.upgradeData = undefined;
  } catch (error) {
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å');
  }
}

export async function handleResetSequence(ctx: BotContext, levelRange: string) {
  try {
    await axios.post(`${API_URL}/user/upgrade-settings/${levelRange}/reset-sequence`);
    
    await ctx.editMessageText(`‚úÖ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –¥–ª—è ${levelRange} —Å–∫–∏–Ω—É—Ç–æ —É—Å–ø—ñ—à–Ω–æ!`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reset_sequence_menu' }]
        ]
      }
    });
  } catch (error) {
    await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'reset_sequence_menu' }]
        ]
      }
    });
  }
} 